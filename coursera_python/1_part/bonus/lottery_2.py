Лотерея - 2

Вы работаете в компании организующей лотереи. На этот раз поставлена задача написать программу генерации всех номеров билетов, которые будут отпечатаны в типографии для следующего розыгрыша. Количество билетов, число цифр в номере билета и
номер серии определяются устроителями лотереи и известны заранее. При проведении некоторых розыгрышей возможны случаи, когда количество требуемых билетов больше, чем возможное количество номеров в указанной серии. Программа должна учитывать
эту ситуацию и при необходимости автоматически изменять серию на другую, согласно правил генерации серий. Входные данные для программы таковы, что гарантируется: количество необходимых билетов больше 0 и количество серий достаточно для генерации
необходимого числа билетов. Программа должна генерировать ровно указанное количество номеров. 

Правила генерации серий: Номер серии изменяется в случае, когда уже сгенерированы все возможные номера текущей серии. Если буква, стоящая справа в текущей серии - "Z", она меняется на букву "A", а буква, стоящая слева, изменяется на букву, которая стоит
следующей по порядку в алфавите за ней. Например: KZ -> LA, TZ -> UA. Во всех остальных случаях, стоящая справа буква текущей серии меняется на букву, которая стоит следующей по порядку в алфавите за текущей. Например: RD -> RE, HO -> HP.

Номера серий билетов могут принимать значения от "AA" до "ZZ". Возможные номера для количества цифр в номере билета равного 6, будут принимать все возможные значения от 000001 до 999999. Крайние значения в указанных выше примерах должны быть включены. 

Вам поручено написать реализацию трех генераторов gen_number, gen_series, gen_ticket_number. Их описание и примеры работы даны ниже.


from itertools import product

def gen_ticket_number(count, series, length=6):
    """
    генератор номеров билетов, входные параметры: count - количество билетов,
    series - номер серии, необязательный аргумент length - количество цифр
    в номере, по умолчанию равен 6, выход - строка вида: <номер билета> <серия билета>
    """
    current_number = 1
    ticket_series = gen_series(series)
    next_series = next(ticket_series)
    
    while count > 0:
        ticket_number = str(current_number).zfill(length)
        
        if next_series == 'AA':
            return

        yield f"{(ticket_number)} {next_series}"
                   
        current_number += 1
        count -= 1
        
        if current_number == 10**(length):
            current_number = 1
            next_series = next(ticket_series)

def gen_series(series):
    """
    генератор серий лотерейных билетов, входные параметры: series -  - номер серии,
    выход - строка, состоящая из двух заглавных букв латинского алфавита
    """
    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    current_series = list(series.upper())
    yield ''.join(current_series)
    while True:
        if current_series[-1] == 'Z':
            current_series[-1] = 'A'
            current_series[-2] = alphabet[(alphabet.index(current_series[-2]) + 1) % len(alphabet)]
        else:
            current_series[-1] = alphabet[(alphabet.index(current_series[-1]) + 1) % len(alphabet)]
        if ''.join(current_series) == 'AA':
            return
        yield ''.join(current_series)


def gen_number(length=6):
    """
    генератор номеров лотерейных билетов, входные параметры: необязательный
    аргумент length - количество цифр в номере, по умолчанию равен 6
    """
    current = 1
    while current < 10 ** length:
        yield str(current).zfill(length)
        current += 1
